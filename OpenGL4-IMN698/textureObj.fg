#version 330 core

struct Material
{
	vec3 ambientCoefs;
	vec3 diffuseCoefs;
	vec3 specularCoefs;
	float shininess;  // acts as brightness for a light
};

struct Light
{
	Material material;

	// Attenuation factors
	float constant;
	float linear;
	float quadratic;
};

#define NB_LIGHTS 2

uniform Material objectMaterial; 
uniform Light lightsProperties[NB_LIGHTS];
uniform vec3 brightnessThreshold;  

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPosition;
in vec3 LightsPositions[NB_LIGHTS];

uniform sampler2D texture0;

layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 BrightColor;

vec3 computeLightContribution(int i, vec3 norm)
{
	// Compute Ambient lighting
	vec3 ambient = lightsProperties[i].material.ambientCoefs * vec3(0.1,0.1,0.1);

	// Compute lighting information
	vec3 frag2Light = LightsPositions[i] - FragPosition;
	vec3 lightDir = normalize(frag2Light);
	float distance = length(frag2Light);
	float factor = (lightsProperties[i].constant + (lightsProperties[i].linear * distance) + (lightsProperties[i].quadratic * (distance*distance)));
	float attenuation = 1.0f / factor;

	// Compute Diffuse lighting
	vec3 diffuse = texture(texture0, TexCoords).rgb;

	// Compute Specular lighting
	vec3 viewDir = normalize(-FragPosition); // Since viewPosition = (0,0,0)
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow( max( dot(norm, halfwayDir), 0.0), objectMaterial.shininess);
	vec3 specular = lightsProperties[i].material.specularCoefs * (spec * vec3(0.1,0.1,0.1));

	// Compute final color
	vec3 result =  (ambient + diffuse + specular) * attenuation;
	return result;
}

void main()
{
	vec3 norm = normalize(Normal);

	vec3 result;
	for(int i =0; i < NB_LIGHTS; ++i)
	{
		result += computeLightContribution(i, norm);
	}

	float brightness = dot(result, brightnessThreshold);
    if(brightness > 1.0)
        BrightColor = vec4(result, 1.0);

    FragColor = vec4(result, 1.0f); 
}
