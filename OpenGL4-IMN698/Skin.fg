#version 330 core

struct Material
{
	vec3 ambientCoefs;
	vec3 diffuseCoefs;
	vec3 specularCoefs;
	float shininess;  // acts as brightness for a light
};

struct Light
{
	Material material;

	// Attenuation factors
	float constant;
	float linear;
	float quadratic;
};

#define NB_LIGHTS 2

uniform Material objectMaterial;
uniform Light lightsProperties[NB_LIGHTS];

uniform sampler2D texture0;
uniform sampler2D texture1;

in vec3 Normal;
in vec3 LightsPositions[NB_LIGHTS];

in VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} fs_in;

out vec4 FragColor;

vec3 computeLightContribution(int i, vec3 norm)
{
	// Compute Ambient lighting
	vec3 ambient = lightsProperties[i].material.ambientCoefs * objectMaterial.ambientCoefs;

	// Compute lighting information
	vec3 frag2Light = LightsPositions[i] - fs_in.FragPos;
	vec3 lightDir = normalize(frag2Light);
	float distance = length(frag2Light);
	float factor = (lightsProperties[i].constant + (lightsProperties[i].linear * distance) + (lightsProperties[i].quadratic * (distance*distance)));
	float attenuation = 1.0f / factor;

	// Compute Diffuse lighting
	float diffCoef = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = lightsProperties[i].material.diffuseCoefs * (diffCoef * objectMaterial.diffuseCoefs);

	// Compute Specular lighting
	vec3 viewDir = normalize(-fs_in.FragPos); // Since viewPosition = (0,0,0)
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow( max( dot(viewDir, reflectDir), 0.0), objectMaterial.shininess);
	vec3 specular = lightsProperties[i].material.specularCoefs * (spec * objectMaterial.specularCoefs);

	// Compute final color
	vec3 result =  (ambient + diffuse + specular) * attenuation;
	return result;
}

void main()
{
	// Obtain normal from normal map in range [0,1]
	vec3 normal = texture(texture1, fs_in.TexCoords).rgb;
	// Transform normal vector to range [-1,1]
	normal = normalize(normal * 2.0 - 1.0);  // this normal is in tangent space

	// Get diffuse color
	vec3 color = texture(texture0, fs_in.TexCoords).rgb;
	// Ambient
	vec3 ambient = 0.5 * color;
	// Diffuse
	vec3 lightDir = normalize(fs_in.TangentLightPos - fs_in.TangentFragPos);
	float diff = max(dot(lightDir, normal), 0.0);
	vec3 diffuse = diff * color;
	// Specular
	vec3 viewDir = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);
	vec3 reflectDir = reflect(-lightDir, normal);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
	vec3 specular = vec3(0.2) * spec;

	FragColor = vec4(ambient + specular + diffuse, 1);
	//FragColor = texture(texture0, fs_in.TexCoords);
}
