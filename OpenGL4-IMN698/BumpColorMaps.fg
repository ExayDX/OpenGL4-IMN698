#version 330 core

struct Material
{
	vec3 ambientCoefs;
	vec3 diffuseCoefs;
	vec3 specularCoefs;
	float shininess;  // acts as brightness for a light
};

struct Light
{
	Material material;

	// Attenuation factors
	float constant;
	float linear;
	float quadratic;
};

#define NB_LIGHTS 2

uniform Material objectMaterial;
uniform Light lightsProperties[NB_LIGHTS];

uniform sampler2D texture0;
uniform sampler2D texture1;

// Parameters
in VS_OUT {
    vec2 TexCoords;
    vec3 TBNViewPosition;
	vec3 FragPosition;
	vec3 LightsPositions[NB_LIGHTS];
} fg_in;

out vec4 fragColor;

vec3 computeLightContribution(int i, vec3 norm)
{
	// Compute Diffuse color
	vec3 diffuseColor = texture(texture0, fg_in.TexCoords).rgb;

	// Compute Ambient
	vec3 ambient = 0.5 * diffuseColor;

	// Compute lighting information
	vec3 frag2Light = fg_in.LightsPositions[i] - fg_in.FragPosition;
	vec3 lightDir = normalize(frag2Light);
	float distance = length(frag2Light);
	float factor = (lightsProperties[i].constant + (lightsProperties[i].linear * distance) + (lightsProperties[i].quadratic * (distance*distance)));
	float attenuation = 1.0f / factor;

	// Compute Diffuse lighting
	float diffCoef = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = lightsProperties[i].material.diffuseCoefs * (diffCoef * diffuseColor);

	// Compute Specular lighting
	vec3 viewDir = normalize(fg_in.TBNViewPosition - fg_in.FragPosition);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow( max( dot(norm, halfwayDir), 0.0), objectMaterial.shininess);
	vec3 specular = lightsProperties[i].material.specularCoefs * (spec * objectMaterial.specularCoefs);

	// Compute final color
	vec3 result = (ambient + diffuse + specular) * attenuation;
	return result;
}

void main()
{
	// Obtain normal from normal map in range [0,1]
	vec3 normal = texture(texture1, fg_in.TexCoords).rgb;

	// Transform normal vector to range [-1,1]
	normal = normalize(normal * 2.0 - 1.0);  // this normal is in tangent space

	vec3 result;
	for(int i =0; i < NB_LIGHTS; ++i)
	{
		result += computeLightContribution(i, normal);
	}

    fragColor = vec4(result, 1.0f);
}
